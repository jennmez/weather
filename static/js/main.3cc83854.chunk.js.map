{"version":3,"sources":["SVG/sun.svg","SVG/rain.svg","SVG/clouds.svg","SVG/lightShowers.svg","SVG/snow.svg","SVG/thunder.svg","SVG/wind.svg","WeatherIcon.js","utilities.js","Temperature.js","DailyForecast.js","Weather.js","Search.js","App.js","index.js"],"names":["module","exports","WeatherIcon","props","conditions","currentWeather","weather","main","imgRef","useRef","useEffect","gsap","from","scaleX","scaleY","duration","repeat","yoyo","ease","src","clouds","thunder","lightShowers","rain","snow","sun","wind","getWeatherIcon","alt","ref","element","timeConverter","dt","dayTimeAccessed","Date","year","getFullYear","month","getMonth","date","getDate","day","getDay","convertCel","currentTemp","converted","Math","round","convertFah","Temperature","current","temp","feels_like","className","tempType","DailyForecast","useState","info","showInfo","divRef","tl","useMemo","timeline","paused","childNodes","y","opacity","stagger","play","reverse","icon","faCaretUp","faCaretDown","color","size","onClick","daily","map","i","key","night","description","slice","Weather","searchedWeather","setTemp","prevState","Search","updateCoords","fullKey","process","publicKey","inputClass","onSuggestionSelect","result","lat","lon","resetSearch","App","api","setWeather","isLoading","setIsLoading","coords","setCoords","fetch","then","response","json","catch","err","console","log","faSpinner","pulse","cod","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3cc83854.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/sun.bd794db7.svg\";","module.exports = __webpack_public_path__ + \"static/media/rain.9585abc4.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.b83aaa77.svg\";","module.exports = __webpack_public_path__ + \"static/media/lightShowers.5d8d8f7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b05bbde7.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.8c1f3c54.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.e29e7062.svg\";","import React, { useRef, useEffect } from 'react';\nimport './styles/index.css';\nimport rain from './SVG/rain.svg';\nimport clouds from './SVG/clouds.svg';\nimport lightShowers from './SVG/lightShowers.svg';\nimport snow from './SVG/snow.svg';\nimport sun from './SVG/sun.svg';\nimport thunder from './SVG/thunder.svg';\nimport wind from './SVG/wind.svg';\n\nimport { gsap } from 'gsap';\n\nconst WeatherIcon = (props) => {\n  const { weather } = props.currentWeather;\n  let conditions = weather[0].main;\n\n  const getWeatherIcon = (conditions) => {\n    switch (conditions) {\n      case 'Clouds':\n        return clouds;\n      case 'Thunderstorm':\n        return thunder;\n      case 'Drizzle':\n        return lightShowers;\n      case 'Rain':\n        return rain;\n      case 'Snow':\n        return snow;\n      case 'Clear':\n        return sun;\n      default:\n        return wind;\n    }\n  };\n\n  let imgRef = useRef(null);\n  useEffect(() => {\n    gsap.from(imgRef, {\n      scaleX: 1.2,\n      scaleY: 1.2,\n      duration: 1,\n      repeat: -1,\n      yoyo: true,\n      ease: 'power1.out',\n    });\n  }, []);\n\n  return (\n    <>\n      <img\n        src={getWeatherIcon(conditions)}\n        alt=\"current weather icon\"\n        ref={(element) => {\n          imgRef = element;\n        }}\n      ></img>\n    </>\n  );\n};\n\nexport default WeatherIcon;\n","export const timeConverter = (dt) => {\n  const dayTimeAccessed = new Date(dt * 1000);\n\n  const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n\n  const months = [\n    'Jan',\n    'Feb',\n    'Mar',\n    'Apr',\n    'May',\n    'June',\n    'July',\n    'Aug',\n    'Sep',\n    'Oct',\n    'Nov',\n    'Dec',\n  ];\n  const year = dayTimeAccessed.getFullYear();\n  const month = months[dayTimeAccessed.getMonth()];\n  const date = dayTimeAccessed.getDate();\n  const day = days[dayTimeAccessed.getDay()];\n  const time = `${day}, ${month} ${date}, ${year}`;\n  return time;\n};\n\nexport const convertCel = (currentTemp) => {\n  let converted = currentTemp - 273.15;\n  return Math.round(converted);\n};\n\nexport const convertFah = (currentTemp) => {\n  let converted = currentTemp * 1.8 - 459.67;\n  return Math.round(converted);\n};\n","import React from 'react';\nimport WeatherIcon from './WeatherIcon';\nimport './styles/index.css';\nimport { convertCel, convertFah } from './utilities';\n\nconst Temperature = (props) => {\n  const { temp, feels_like } = props.current;\n\n  return (\n    <>\n      <div className=\"weather-container\">\n        <div className=\"weather-pic\">\n          <WeatherIcon\n            className=\"weather-icon\"\n            currentWeather={props.current}\n          ></WeatherIcon>\n        </div>\n        <div className=\"temp-container\">\n          <div className=\"temp\">\n            {props.tempType === 'F' ? convertFah(temp) : convertCel(temp)}\n            <span>°{props.tempType}</span>\n          </div>\n          <h5>\n            Feels like{' '}\n            {props.tempType === 'F'\n              ? convertFah(feels_like)\n              : convertCel(feels_like)}\n            °\n          </h5>\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Temperature;\n","import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport './styles/index.css';\nimport { timeConverter, convertCel, convertFah } from './utilities';\nimport WeatherIcon from './WeatherIcon';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport gsap from 'gsap';\n\nconst DailyForecast = (props) => {\n  const [info, showInfo] = useState(false);\n\n  let divRef = useRef(0);\n  const tl = useMemo(() => gsap.timeline({ paused: true }), []);\n\n  useEffect(() => {\n    tl.from(divRef.current.childNodes, {\n      y: 100,\n      opacity: 0,\n      ease: 'power3.out',\n      duration: 0.7,\n      stagger: 0.1,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (info) {\n      tl.play();\n    } else {\n      tl.reverse();\n    }\n  }, [info]);\n\n  return (\n    <>\n      {!info ? (\n        <h3>Show me the 7-day forecast</h3>\n      ) : (\n        <h3>Hide the 7-day forecast</h3>\n      )}\n      <div>\n        <FontAwesomeIcon\n          className=\"icon\"\n          icon={!info ? faCaretDown : faCaretUp}\n          color=\"#ff9800\"\n          size=\"lg\"\n          onClick={() => showInfo(!info)}\n        />\n      </div>\n      <div ref={divRef} className=\"dailys\">\n        {props.daily\n          .map((day, i) => (\n            <div key={i} className=\"day\">\n              <h4 className=\"date\">{timeConverter(day.dt)}</h4>\n              <div className=\"daily-icon\">\n                <WeatherIcon currentWeather={day}></WeatherIcon>\n              </div>\n              <p>\n                Day:{' '}\n                {props.tempType === 'F'\n                  ? convertFah(day.temp.day)\n                  : convertCel(day.temp.day)}\n                <span>°{props.tempType}</span>\n              </p>\n              <p>\n                Night:{' '}\n                {props.tempType === 'F'\n                  ? convertFah(day.temp.night)\n                  : convertCel(day.temp.night)}\n                <span>°{props.tempType}</span>\n              </p>\n              <p>Forecast: {day.weather[0].description}</p>\n            </div>\n          ))\n          .slice(1)}\n      </div>\n    </>\n  );\n};\n\nexport default DailyForecast;\n","import React, { useState } from 'react';\nimport './styles/index.css';\nimport Temperature from './Temperature';\nimport DailyForecast from './DailyForecast';\nimport { timeConverter } from './utilities';\n\nconst Weather = (props) => {\n  const { current, daily } = props.searchedWeather;\n\n  const [tempType, setTemp] = useState('F');\n\n  const toggle = () => {\n    setTemp((prevState) => (prevState === 'F' ? 'C' : 'F'));\n  };\n\n  return (\n    <div className=\"main\">\n      {typeof current !== 'undefined' ? (\n        <>\n          <div className=\"general-info\">\n            <div className=\"date-time\">{timeConverter(current.dt)}</div>\n            <div className=\"weather-type\">\n              Today's forecast is: {current.weather[0].main}\n            </div>\n            <button className=\"toggle\" onClick={toggle}>\n              change to °{tempType === 'F' ? 'C' : 'F'}\n            </button>\n          </div>\n          <Temperature current={current} tempType={tempType}></Temperature>\n          <DailyForecast daily={daily} tempType={tempType}></DailyForecast>\n        </>\n      ) : (\n        <>\n          <div className=\"location\">\n            Enter the name of a city to see the current forecast.\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n","import React from 'react';\nimport MapboxAutoComplete from 'react-mapbox-autocomplete';\n\nconst Search = (props) => {\n  let { updateCoords } = props;\n\n  const key = process.env.REACT_APP_MAPBOX_API_KEY;\n  const fullKey = `pk.${key}`;\n  const selectCity = (result, lat, lon) => {\n    updateCoords({ lat, lon });\n  };\n\n  return (\n    <div className=\"search\">\n      <MapboxAutoComplete\n        publicKey={fullKey}\n        inputClass=\"search\"\n        onSuggestionSelect={selectCity}\n        resetSearch={false}\n      />\n    </div>\n  );\n};\n\nexport default Search;\n","import React, { useState, useEffect } from 'react';\nimport './styles/index.css';\nimport Weather from './Weather';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\nimport sun from './SVG/sun.svg';\nimport Search from './Search';\n\nfunction App() {\n  const api = {\n    key: process.env.REACT_APP_WEATHER_API_KEY,\n    baseurl: 'https://api.openweathermap.org/data/2.5/',\n  };\n\n  //takes weather from city, initially an empty object b/c we don't have data from the API yet\n  const [weather, setWeather] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const [coords, setCoords] = useState({});\n\n  const updateCoords = (coords) => {\n    setCoords(coords);\n  };\n\n  const search = (evt) => {\n    if (coords.lon) {\n      setIsLoading(true);\n      fetch(\n        `${api.baseurl}onecall?lat=${coords.lat}&lon=${coords.lon}&appid=${api.key}`\n      )\n        .then((response) => {\n          return response.json();\n        })\n        .then((result) => {\n          setWeather(result);\n          setIsLoading(false);\n        })\n        .catch((err) => console.log('you hit an error', err));\n    }\n  };\n\n  useEffect(() => {\n    if (coords !== '') {\n      search(coords);\n    }\n  }, [coords]);\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <h1>Weather</h1>\n        <div className=\"header-icon\">\n          <img src={sun} alt=\"sun icon\" />\n        </div>\n        <h1>d</h1>\n      </div>\n      <Search updateCoords={updateCoords} />\n      {isLoading ? (\n        <div className=\"loading\">\n          <FontAwesomeIcon icon={faSpinner} size=\"lg\" color=\"#ff9800\" pulse />\n          <p>Please wait while we find that forecast.</p>\n        </div>\n      ) : null}\n      {weather.cod === '404' ? (\n        <div className=\"error\">\n          <h3>Oh no! That city was not found. Please try another location!</h3>\n        </div>\n      ) : (\n        <Weather searchedWeather={weather}></Weather>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}