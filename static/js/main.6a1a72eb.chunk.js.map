{"version":3,"sources":["SVG/rain.svg","SVG/clouds.svg","SVG/lightShowers.svg","SVG/snow.svg","SVG/sun.svg","SVG/thunder.svg","SVG/wind.svg","SVG/sunrise.svg","SVG/sunset.svg","WeatherIcon.js","Temperature.js","Weather.js","App.js","index.js"],"names":["module","exports","WeatherIcon","props","conditions","currentWeather","weather","main","imgRef","useRef","useEffect","gsap","from","scaleX","scaleY","duration","repeat","yoyo","ease","src","clouds","thunder","lightShowers","rain","snow","sun","wind","getWeatherIcon","alt","className","ref","element","Temperature","temp","temp_max","temp_min","humidity","sys","sunrise","sunset","speed","useState","tempType","setTemp","showInfo","setInfo","convertCel","currentTemp","converted","Math","round","convertFah","timeConverter","time","Date","toLocaleTimeString","undefined","hour","minute","divRef","timeline","useMemo","paused","current","childNodes","y","opacity","stagger","play","reverse","onClick","prevState","icon","faCaretDown","faCaretUp","color","size","sunriseIcon","sunsetIcon","Weather","dt","dayTimeAccessed","year","getFullYear","month","getMonth","date","getDate","day","getDay","name","country","App","api","process","city","setCity","setWeather","isLoading","setIsLoading","type","placeholder","onChange","event","target","value","onKeyPress","evt","key","fetch","then","response","json","result","catch","err","console","log","faSpinner","pulse","cod","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6a1a72eb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/rain.9585abc4.svg\";","module.exports = __webpack_public_path__ + \"static/media/clouds.b83aaa77.svg\";","module.exports = __webpack_public_path__ + \"static/media/lightShowers.5d8d8f7f.svg\";","module.exports = __webpack_public_path__ + \"static/media/snow.b05bbde7.svg\";","module.exports = __webpack_public_path__ + \"static/media/sun.bd794db7.svg\";","module.exports = __webpack_public_path__ + \"static/media/thunder.8c1f3c54.svg\";","module.exports = __webpack_public_path__ + \"static/media/wind.e29e7062.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunrise.550e5b6e.svg\";","module.exports = __webpack_public_path__ + \"static/media/sunset.75c954b8.svg\";","import React, { useRef, useEffect } from 'react';\nimport './styles/index.css';\nimport rain from './SVG/rain.svg';\nimport clouds from './SVG/clouds.svg';\nimport lightShowers from './SVG/lightShowers.svg';\nimport snow from './SVG/snow.svg';\nimport sun from './SVG/sun.svg';\nimport thunder from './SVG/thunder.svg';\nimport wind from './SVG/wind.svg';\n\nimport { gsap } from 'gsap';\n\nconst WeatherIcon = (props) => {\n  const { weather } = props.currentWeather;\n  let conditions = weather[0].main;\n\n  const getWeatherIcon = (conditions) => {\n    switch (conditions) {\n      case 'Clouds':\n        return clouds;\n      case 'Thunderstorm':\n        return thunder;\n      case 'Drizzle':\n        return lightShowers;\n      case 'Rain':\n        return rain;\n      case 'Snow':\n        return snow;\n      case 'Clear':\n        return sun;\n      default:\n        return wind;\n    }\n  };\n\n  let imgRef = useRef(null);\n  useEffect(() => {\n    gsap.from(imgRef, {\n      scaleX: 1.2,\n      scaleY: 1.2,\n      duration: 1,\n      repeat: -1,\n      yoyo: true,\n      ease: 'power1.out',\n    });\n  }, []);\n\n  return (\n    <>\n      <img\n        src={getWeatherIcon(conditions)}\n        alt=\"current weather icon\"\n        className=\"weather-icon\"\n        ref={(element) => {\n          imgRef = element;\n        }}\n      ></img>\n    </>\n  );\n};\n\nexport default WeatherIcon;\n","import React, { useState, useRef, useEffect, useMemo } from 'react';\nimport WeatherIcon from './WeatherIcon';\nimport './styles/index.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faCaretDown, faCaretUp } from '@fortawesome/free-solid-svg-icons';\nimport sunriseIcon from './SVG/sunrise.svg';\nimport sunsetIcon from './SVG/sunset.svg';\nimport gsap from 'gsap';\n\nconst Temperature = (props) => {\n  const { temp, temp_max, temp_min, humidity } = props.main;\n  const { sunrise, sunset } = props.sys;\n  const { speed } = props.wind;\n\n  const [tempType, setTemp] = useState('F');\n  const [showInfo, setInfo] = useState(false);\n\n  const convertCel = (currentTemp) => {\n    let converted = currentTemp - 273.15;\n    return Math.round(converted);\n  };\n\n  const convertFah = (currentTemp) => {\n    let converted = currentTemp * 1.8 - 459.67;\n    return Math.round(converted);\n  };\n\n  const toggle = () => {\n    setTemp((prevState) => (prevState === 'F' ? 'C' : 'F'));\n  };\n\n  const timeConverter = (time) => {\n    const now = new Date(time * 1000);\n    const timeInZone = now.toLocaleTimeString(undefined, {\n      hour: '2-digit',\n      minute: '2-digit',\n    });\n    return timeInZone;\n  };\n\n  const display = () => {\n    setInfo((prevState) => (prevState === false ? true : false));\n  };\n\n  let divRef = useRef(0);\n  const timeline = useMemo(() => gsap.timeline({ paused: true }), []);\n\n  //not working, need to research more\n  useEffect(() => {\n    timeline.from(divRef.current.childNodes, {\n      y: 100,\n      opacity: 0,\n      ease: 'power1.out',\n      duration: 0.7,\n      stagger: 0.1,\n    });\n  }, []);\n\n  useEffect(() => {\n    if (showInfo) {\n      timeline.play();\n    } else {\n      timeline.reverse();\n    }\n  }, [showInfo]);\n\n  return (\n    <>\n      <div className=\"weather-container\">\n        <div className=\"weather-pic\">\n          <WeatherIcon currentWeather={props.currentWeather}></WeatherIcon>\n        </div>\n        <div className=\"temp-container\">\n          <div className=\"temp\">\n            {tempType === 'F' ? convertFah(temp) : convertCel(temp)}\n            <span>°{tempType}</span>\n          </div>\n          <button className=\"toggle\" onClick={toggle}>\n            change to °{tempType === 'F' ? 'C' : 'F'}\n          </button>\n        </div>\n        <div className=\"more-temp\">\n          {showInfo === false ? (\n            <h2>Show me more details</h2>\n          ) : (\n            <h2>Hide these details</h2>\n          )}\n          <div>\n            <FontAwesomeIcon\n              className=\"icon\"\n              icon={showInfo === false ? faCaretDown : faCaretUp}\n              color=\"#ff9800\"\n              size=\"lg\"\n              onClick={display}\n            />\n          </div>\n          {showInfo === false ? null : (\n            <div className=\"highs-lows\" ref={(element) => (divRef = element)}>\n              <p>\n                High:{' '}\n                {tempType === 'F' ? convertFah(temp_max) : convertCel(temp_max)}\n                <span>°{tempType}</span>\n              </p>\n              <p>\n                Low:{' '}\n                {tempType === 'F' ? convertFah(temp_min) : convertCel(temp_min)}\n                <span>°{tempType}</span>\n              </p>\n              <p>Humidity: {humidity}%</p>\n              <p>Wind Speed: {speed} mph</p>\n              <div className=\"sunrise-container\">\n                <img className=\"icon\" src={sunriseIcon} alt=\"sunrise icon\" />\n                <div className=\"sunrise-content\">{timeConverter(sunrise)}</div>\n                <img className=\"icon\" src={sunsetIcon} alt=\"sunset icon\" />\n                <div className=\"sunrise-content\">{timeConverter(sunset)}</div>\n              </div>\n            </div>\n          )}\n        </div>\n      </div>\n    </>\n  );\n};\n\nexport default Temperature;\n","import React from 'react';\nimport './styles/index.css';\nimport Temperature from './Temperature';\n\nconst Weather = (props) => {\n  const { weather } = props;\n  const { main, sys, dt, wind } = weather;\n\n  const timeConverter = (dt) => {\n    const dayTimeAccessed = new Date(dt * 1000);\n\n    const days = [\n      'Sunday',\n      'Monday',\n      'Tuesday',\n      'Wednesday',\n      'Thursday',\n      'Friday',\n      'Saturday',\n    ];\n\n    const months = [\n      'Jan',\n      'Feb',\n      'Mar',\n      'Apr',\n      'May',\n      'June',\n      'July',\n      'Aug',\n      'Sep',\n      'Oct',\n      'Nov',\n      'Dec',\n    ];\n    const year = dayTimeAccessed.getFullYear();\n    const month = months[dayTimeAccessed.getMonth()];\n    const date = dayTimeAccessed.getDate();\n    const day = days[dayTimeAccessed.getDay()];\n    const time = `${day}, ${month} ${date}, ${year}`;\n    return time;\n  };\n\n  return (\n    <div className=\"main\">\n      {typeof main != 'undefined' ? (\n        <>\n          <div className=\"date-time\">{timeConverter(dt)}</div>\n          <div className=\"location\">\n            {weather.name}, {sys.country}\n          </div>\n          <div className=\"weather-type\">\n            Today's forecast is: {weather.weather[0].main}\n          </div>\n          <Temperature\n            main={main}\n            currentWeather={weather}\n            sys={sys}\n            wind={wind}\n          ></Temperature>\n        </>\n      ) : (\n        <>\n          <div className=\"location\">\n            Enter the name of a city to see the current forecast.\n          </div>\n        </>\n      )}\n    </div>\n  );\n};\n\nexport default Weather;\n","import React, { useState } from 'react';\nimport './styles/index.css';\nimport Weather from './Weather';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\nimport { faSpinner } from '@fortawesome/free-solid-svg-icons';\n\nfunction App() {\n  const api = {\n    key: process.env.REACT_APP_WEATHER_API_KEY,\n    baseurl: 'https://api.openweathermap.org/data/2.5/',\n  };\n  //taking a city from our search, initial state is empty string\n  const [city, setCity] = useState('');\n  //takes weather from city, initially an empty object b/c we don't have data from the API yet\n  const [weather, setWeather] = useState({});\n  const [isLoading, setIsLoading] = useState(false);\n\n  const search = (evt) => {\n    if (evt.key === 'Enter') {\n      setIsLoading(true);\n      fetch(`${api.baseurl}weather?q=${city}&appid=${api.key}`)\n        .then((response) => {\n          return response.json();\n        })\n        .then((result) => {\n          setWeather(result);\n          setCity('');\n          setIsLoading(false);\n        })\n        .catch((err) => console.log('you hit an error', err));\n    }\n  };\n\n  return (\n    <div className=\"container\">\n      <div className=\"header\">\n        <div className=\"title\">Weather Outlook</div>\n        <input\n          type=\"text\"\n          className=\"search\"\n          placeholder=\"What's the weather in...\"\n          onChange={(event) => setCity(event.target.value)}\n          value={city}\n          onKeyPress={search}\n        ></input>\n      </div>\n      {isLoading ? (\n        <div className=\"loading\">\n          <FontAwesomeIcon icon={faSpinner} size=\"lg\" color=\"#ff9800\" pulse />\n          <p>Please wait while we find that forecast.</p>\n        </div>\n      ) : null}\n      {weather.cod === '404' ? (\n        <div className=\"error\">\n          <h3>Oh no! That city was not found. Please try another location!</h3>\n        </div>\n      ) : (\n        <Weather weather={weather}></Weather>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/index.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}